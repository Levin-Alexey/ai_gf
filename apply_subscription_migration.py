"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
"""
import asyncio
from database import engine
from sqlalchemy import text


async def apply_migration():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è subscription_expires_at"""
    
    # –°–ø–∏—Å–æ–∫ SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    sql_commands = [
        """
        ALTER TABLE users 
        ADD COLUMN subscription_expires_at TIMESTAMP WITH TIME ZONE DEFAULT NULL
        """,
        """
        CREATE INDEX idx_users_subscription ON users(subscription_expires_at) 
        WHERE subscription_expires_at IS NOT NULL
        """,
        """
        COMMENT ON COLUMN users.subscription_expires_at IS 
        '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. NULL = –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞ = –∏—Å—Ç—ë–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
        """
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
    async with engine.begin() as conn:
        for i, sql in enumerate(sql_commands, 1):
            try:
                await conn.execute(text(sql))
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i}/3 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                if "already exists" in str(e) or "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e):
                    print(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ {i}/3 –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)")
                else:
                    raise
    
    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
    print("üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: users.subscription_expires_at")
    print("üîç –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: idx_users_subscription")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
    await engine.dispose()


if __name__ == '__main__':
    asyncio.run(apply_migration())
