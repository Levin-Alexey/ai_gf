"""
–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç OpenRouter API —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""
import asyncio
import logging
import aiohttp
import json
from config import LLM_API_URL, LLM_API_KEY, LLM_MODEL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_openrouter_detailed():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç OpenRouter API"""
    try:
        print("üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OpenRouter API")
        print("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"üìä API URL: {LLM_API_URL}")
        print(f"üìä Model: {LLM_MODEL}")
        print(f"üìä API Key: {LLM_API_KEY[:15]}..." if LLM_API_KEY else "‚ùå API Key: –ù–ï –ù–ê–ô–î–ï–ù!")
        
        if not LLM_API_KEY:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        if not LLM_API_KEY.startswith('sk-or-'):
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!")
            print(f"   –¢–µ–∫—É—â–∏–π: {LLM_API_KEY[:15]}...")
            print("   –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å: sk-or-")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if 'openrouter.ai' not in LLM_API_URL:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: URL –Ω–µ –¥–ª—è OpenRouter!")
            print(f"   –¢–µ–∫—É—â–∏–π: {LLM_API_URL}")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: https://openrouter.ai/api/v1/chat/completions")
        
        # 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        headers = {
            "Authorization": f"Bearer {LLM_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://ai-gf-bot.com",
            "X-Title": "AI Girlfriend Bot"
        }
        
        messages = [
            {
                "role": "system",
                "content": "–¢—ã AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            },
            {
                "role": "user", 
                "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å '–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!'"
            }
        ]
        
        data = {
            "model": LLM_MODEL,
            "messages": messages,
            "max_tokens": 50,
            "temperature": 0.7
        }
        
        print(f"\nüåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        print(f"üì§ Headers: {json.dumps(headers, indent=2)}")
        print(f"üì§ Data: {json.dumps(data, indent=2)}")
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        async with aiohttp.ClientSession() as session:
            async with session.post(
                LLM_API_URL,
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                print(f"üìä Headers –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
                
                response_text = await response.text()
                print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_text}")
                
                if response.status == 200:
                    try:
                        result = json.loads(response_text)
                        if 'choices' in result and len(result['choices']) > 0:
                            answer = result['choices'][0]['message']['content'].strip()
                            print(f"\n‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM:")
                            print(f"üí¨ {answer}")
                            return True
                        else:
                            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                            return False
                    except json.JSONDecodeError:
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞")
                        return False
                        
                elif response.status == 401:
                    print(f"\n‚ùå –û–®–ò–ë–ö–ê 401: –ù–µ–≤–µ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                    print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á")
                    print("   2. –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞")
                    print("   3. –ö–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    print("   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    try:
                        error_data = json.loads(response_text)
                        if 'error' in error_data:
                            print(f"   üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data['error']}")
                    except:
                        pass
                    
                    return False
                    
                elif response.status == 429:
                    print(f"\n‚ùå –û–®–ò–ë–ö–ê 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                    print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("   1. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É")
                    print("   2. –ò—Å—á–µ—Ä–ø–∞–Ω –±–∞–ª–∞–Ω—Å API")
                    print("   3. –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç")
                    return False
                    
                elif response.status == 400:
                    print(f"\n‚ùå –û–®–ò–ë–ö–ê 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
                    print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
                    print("   2. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                    print("   3. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                    return False
                    
                else:
                    print(f"\n‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê: {response.status}")
                    return False
                    
    except asyncio.TimeoutError:
        print(f"\n‚ùå –¢–ê–ô–ú–ê–£–¢: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
        return False
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_openrouter_detailed()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ OpenRouter API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
    else:
        print("‚ö†Ô∏è OpenRouter API –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –Ω–∞ openrouter.ai")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å—á–µ—Ç—É –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")
        print("   3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
