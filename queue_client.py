"""
RabbitMQ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
import json
import logging
from typing import Dict, Any, Callable, Optional
import aio_pika
from aio_pika import Connection, Channel, Queue, Message
from aio_pika.abc import AbstractRobustConnection
from config import (RABBITMQ_HOST, RABBITMQ_PORT, RABBITMQ_USER,
                   RABBITMQ_PASSWORD, RABBITMQ_VHOST)

logger = logging.getLogger(__name__)


class QueueClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ"""
    
    def __init__(self):
        self.connection: Optional[AbstractRobustConnection] = None
        self.channel: Optional[Channel] = None
        self.queue_name = "llm_requests"
        self.response_queue = "llm_responses"
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ: {RABBITMQ_HOST}:{RABBITMQ_PORT}")
            logger.info(f"üìä RabbitMQ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: user={RABBITMQ_USER}, vhost={RABBITMQ_VHOST}")
            
            # –°–æ–∑–¥–∞–µ–º URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            rabbitmq_url = (
                f"amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}"
                f"@{RABBITMQ_HOST}:{RABBITMQ_PORT}/{RABBITMQ_VHOST}"
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ —Å robust connection (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
            self.connection = await aio_pika.connect_robust(
                rabbitmq_url,
                timeout=30,
                heartbeat=600
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
            self.channel = await self.connection.channel()
            
            # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–∏
            await self.channel.declare_queue(self.queue_name, durable=True)
            await self.channel.declare_queue(self.response_queue, durable=True)
            
            logger.info("‚úÖ RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω—ã –æ—á–µ—Ä–µ–¥–∏: {self.queue_name}, {self.response_queue}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç RabbitMQ"""
        try:
            if self.connection and not self.connection.is_closed:
                await self.connection.close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç RabbitMQ: {e}")
    
    async def publish_message(self, message: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if not self.channel or self.channel.is_closed:
                raise Exception("–ö–∞–Ω–∞–ª RabbitMQ –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_body = json.dumps(message).encode()
            aio_message = Message(
                message_body,
                delivery_mode=aio_pika.DeliveryMode.PERSISTENT
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            await self.channel.default_exchange.publish(
                aio_message,
                routing_key=self.queue_name
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {message.get('user_id')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            raise
    
    async def consume_requests(self, callback: Callable[[Dict[str, Any]], None]) -> None:
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            if not self.channel or self.channel.is_closed:
                raise Exception("–ö–∞–Ω–∞–ª RabbitMQ –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            queue: Queue = await self.channel.get_queue(self.queue_name)
            
            async def on_message(message: aio_pika.IncomingMessage):
                async with message.process():
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        body = json.loads(message.body.decode())
                        
                        # –í—ã–∑—ã–≤–∞–µ–º callback
                        if asyncio.iscoroutinefunction(callback):
                            await callback(body)
                        else:
                            callback(body)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self.channel.set_qos(prefetch_count=1)
            await queue.consume(on_message)
            
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            raise
    
    async def stop_consuming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.channel and not self.channel.is_closed:
                # –í aio-pika –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ—Ç–º–µ–Ω—É –∑–∞–¥–∞—á –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞
                logger.info("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–µ–π
queue_client = QueueClient()
