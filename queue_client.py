"""
RabbitMQ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import json
import logging
from typing import Dict, Any, Callable
import pika
from config import (RABBITMQ_HOST, RABBITMQ_PORT, RABBITMQ_USER,
                   RABBITMQ_PASSWORD, RABBITMQ_VHOST)

logger = logging.getLogger(__name__)


class QueueClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ"""
    
    def __init__(self):
        self.connection = None
        self.channel = None
        self.queue_name = "llm_requests"
        self.response_queue = "llm_responses"
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ: {RABBITMQ_HOST}:{RABBITMQ_PORT}")
            logger.info(f"üìä RabbitMQ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: user={RABBITMQ_USER}, vhost={RABBITMQ_VHOST}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASSWORD)
            parameters = pika.ConnectionParameters(
                host=RABBITMQ_HOST,
                port=RABBITMQ_PORT,
                virtual_host=RABBITMQ_VHOST,
                credentials=credentials,
                connection_attempts=3,
                retry_delay=5,
                socket_timeout=30,
                blocked_connection_timeout=300,
                heartbeat=600
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
            self.connection = pika.BlockingConnection(parameters)
            self.channel = self.connection.channel()
            
            # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–∏
            self.channel.queue_declare(queue=self.queue_name, durable=True)
            self.channel.queue_declare(queue=self.response_queue, durable=True)
            
            logger.info("‚úÖ RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω—ã –æ—á–µ—Ä–µ–¥–∏: {self.queue_name}, {self.response_queue}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            raise
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç RabbitMQ"""
        try:
            if self.connection and not self.connection.is_closed:
                self.connection.close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç RabbitMQ: {e}")
    
    def publish_message(self, message: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if not self.channel or self.channel.is_closed:
                raise Exception("–ö–∞–Ω–∞–ª RabbitMQ –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            self.channel.basic_publish(
                exchange='',
                routing_key="llm_requests",
                body=json.dumps(message),
                properties=pika.BasicProperties(
                    delivery_mode=2,  # –î–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º
                )
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {message.get('user_id')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            raise
    
    def consume_requests(self, callback: Callable[[Dict[str, Any]], None]) -> None:
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            if not self.channel or self.channel.is_closed:
                raise Exception("–ö–∞–Ω–∞–ª RabbitMQ –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
            
            def on_message(channel, method, properties, body):
                try:
                    message = json.loads(body)
                    callback(message)
                    channel.basic_ack(delivery_tag=method.delivery_tag)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    channel.basic_nack(delivery_tag=method.delivery_tag, requeue=False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.channel.basic_qos(prefetch_count=1)
            self.channel.basic_consume(
                queue=self.queue_name,
                on_message_callback=on_message
            )
            
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
            self.channel.start_consuming()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            raise
    
    def stop_consuming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.channel and not self.channel.is_closed:
                self.channel.stop_consuming()
                logger.info("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–µ–π
queue_client = QueueClient()
