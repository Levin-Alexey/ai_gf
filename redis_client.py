"""
Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
"""
import json
import logging
import time
from typing import List, Dict
import redis.asyncio as redis
from config import (REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, 
                   CHAT_HISTORY_LIMIT, CHAT_TIMEOUT)

logger = logging.getLogger(__name__)


class RedisClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis"""
    
    def __init__(self):
        self.redis = None
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis: {REDIS_HOST}:{REDIS_PORT}")
            self.redis = redis.Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD,
                decode_responses=True
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.redis.ping()
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: host={REDIS_HOST}, port={REDIS_PORT}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self.redis:
            await self.redis.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
    
    def _get_chat_key(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"chat_history:{user_id}"
    
    async def add_message(self, user_id: int, role: str, content: str) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        try:
            chat_key = self._get_chat_key(user_id)
            message = {
                "role": role,
                "content": content,
                "timestamp": int(time.time())
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
            await self.redis.lpush(chat_key, json.dumps(message))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self.redis.ltrim(chat_key, 0, CHAT_HISTORY_LIMIT - 1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –¥–ª—è –∫–ª—é—á–∞ (24 —á–∞—Å–∞)
            await self.redis.expire(chat_key, 86400)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis: {e}")
    
    async def get_chat_history(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat_key = self._get_chat_key(user_id)
            messages = await self.redis.lrange(chat_key, 0, -1)
            
            # –ü–∞—Ä—Å–∏–º JSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            history = []
            for msg in reversed(messages):
                try:
                    message_data = json.loads(msg)
                    history.append(message_data)
                except json.JSONDecodeError:
                    continue
            
            return history
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ Redis: {e}")
            return []
    
    async def clear_chat_history(self, user_id: int) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat_key = self._get_chat_key(user_id)
            await self.redis.delete(chat_key)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
    
    async def set_user_chat_state(self, user_id: int, is_chatting: bool) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            state_key = f"chat_state:{user_id}"
            await self.redis.set(state_key, "1" if is_chatting else "0", ex=CHAT_TIMEOUT)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞: {e}")
    
    async def get_user_chat_state(self, user_id: int) -> bool:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            state_key = f"chat_state:{user_id}"
            state = await self.redis.get(state_key)
            return state == "1"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞: {e}")
            return False
    
    async def incr(self, key: str) -> int:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç—á–∏–∫"""
        return await self.redis.incr(key)
    
    async def expire(self, key: str, seconds: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TTL –¥–ª—è –∫–ª—é—á–∞"""
        return await self.redis.expire(key, seconds)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = RedisClient()
