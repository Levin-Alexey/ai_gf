"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from aiogram import Router, F, types
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import async_session_maker
from crud import (
    update_user_tone,
    get_user_by_telegram_id,
    add_user_interests,
    add_user_goals,
    update_user_about
)
from models import GFTone, GFInterest, GFGoal
from .menu import show_main_menu

router = Router()
logger = logging.getLogger(__name__)


class QuestionnaireStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞"""
    choosing_tone = State()
    choosing_interests = State()
    choosing_goals = State()
    waiting_about = State()


async def show_tone_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
                    callback_data="tone:friendly"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíñ –ù–µ–∂–Ω—ã–π",
                    callback_data="tone:gentle"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üòé –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
                    callback_data="tone:neutral"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üòè –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π",
                    callback_data="tone:sarcastic"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π",
                    callback_data="tone:formal"
                )
            ],
        ]
    )

    if callback.message:
        await callback.message.edit_text(
            "üé® –í—ã–±–µ—Ä–∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:\n\n"
            "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π ‚Äî —Ç—ë–ø–ª—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π\n"
            "üíñ –ù–µ–∂–Ω—ã–π ‚Äî –º—è–≥–∫–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π\n"
            "üòé –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π\n"
            "üòè –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π ‚Äî —Å —é–º–æ—Ä–æ–º –∏ –∏—Ä–æ–Ω–∏–µ–π\n"
            "üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "start_questionnaire")
async def start_questionnaire(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫"""
    await state.set_state(QuestionnaireStates.choosing_tone)
    await show_tone_selection(callback)


@router.callback_query(F.data.startswith("tone:"))
async def process_tone_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è"""
    if not callback.data:
        return

    tone_value = callback.data.split(":")[1]

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ enum
    tone_map = {
        'friendly': GFTone.FRIENDLY,
        'gentle': GFTone.GENTLE,
        'neutral': GFTone.NEUTRAL,
        'sarcastic': GFTone.SARCASTIC,
        'formal': GFTone.FORMAL,
    }

    selected_tone = tone_map.get(tone_value)

    if selected_tone and callback.message:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session_maker() as session:
            await update_user_tone(
                session,
                telegram_id=callback.from_user.id,
                tone=selected_tone
            )
            await session.commit()

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} "
            f"–≤—ã–±—Ä–∞–ª —Ç–æ–Ω: {tone_value}"
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        await state.update_data(selected_interests=[])
        await state.set_state(QuestionnaireStates.choosing_interests)
        await show_interests_selection(callback, [])

        await callback.answer("–¢–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")


async def show_interests_selection(
    callback: CallbackQuery,
    selected: list
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å —ç–º–æ–¥–∑–∏
    interests_info = {
        'work': ('üíº', '–†–∞–±–æ—Ç–∞'),
        'startups': ('üöÄ', '–°—Ç–∞—Ä—Ç–∞–ø—ã'),
        'sport': ('‚öΩ', '–°–ø–æ—Ä—Ç'),
        'movies': ('üé¨', '–§–∏–ª—å–º—ã'),
        'games': ('üéÆ', '–ò–≥—Ä—ã'),
        'music': ('üéµ', '–ú—É–∑—ã–∫–∞'),
        'travel': ('‚úàÔ∏è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'),
        'self_growth': ('üìà', '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'),
        'psychology': ('üß†', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è'),
        'ai_tech': ('ü§ñ', 'AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
        'books': ('üìö', '–ö–Ω–∏–≥–∏'),
    }

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard_buttons = []
    for interest_key, (emoji, name) in interests_info.items():
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –≤—ã–±—Ä–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
        check = "‚úÖ " if interest_key in selected else ""
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{check}{emoji} {name}",
                callback_data=f"interest:{interest_key}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚ú® –ì–æ—Ç–æ–≤–æ",
            callback_data="interests_done"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if callback.message:
        await callback.message.edit_text(
            "üéØ –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n\n"
            "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –≥–∞–ª–æ—á–∫—É.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª ‚ú®",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("interest:"))
async def toggle_interest(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    if not callback.data:
        return

    interest_value = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    data = await state.get_data()
    selected = data.get('selected_interests', [])

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
    if interest_value in selected:
        selected.remove(interest_value)
    else:
        selected.append(interest_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_interests=selected)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await show_interests_selection(callback, selected)
    await callback.answer()


@router.callback_query(F.data == "interests_done")
async def save_interests(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã"""
    data = await state.get_data()
    selected = data.get('selected_interests', [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ enum
    interest_map = {
        'work': GFInterest.WORK,
        'startups': GFInterest.STARTUPS,
        'sport': GFInterest.SPORT,
        'movies': GFInterest.MOVIES,
        'games': GFInterest.GAMES,
        'music': GFInterest.MUSIC,
        'travel': GFInterest.TRAVEL,
        'self_growth': GFInterest.SELF_GROWTH,
        'psychology': GFInterest.PSYCHOLOGY,
        'ai_tech': GFInterest.AI_TECH,
        'books': GFInterest.BOOKS,
    }

    interests_enums = [
        interest_map[key] for key in selected if key in interest_map
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with async_session_maker() as session:
        if interests_enums:
            await add_user_interests(
                session,
                telegram_id=callback.from_user.id,
                interests=interests_enums
            )
        await session.commit()

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} "
        f"–≤—ã–±—Ä–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å—ã: {selected}"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–π
    await state.update_data(selected_goals=[])
    await state.set_state(QuestionnaireStates.choosing_goals)
    await show_goals_selection(callback, [])

    await callback.answer("–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


async def show_goals_selection(callback: CallbackQuery, selected: list):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–µ–π"""
    # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ —Å —ç–º–æ–¥–∑–∏
    goals_info = {
        'support': ('ü§ó', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'),
        'motivation': ('üí™', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è'),
        'chitchat': ('üí¨', '–û–±—â–µ–Ω–∏–µ'),
        'advice': ('üí°', '–°–æ–≤–µ—Ç—ã'),
        'learn_english': ('üá¨üáß', '–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ'),
        'project_ideas': ('üöÄ', '–ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'),
        'brainstorm': ('üß†', '–ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º'),
        'stress_relief': ('üòå', '–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞'),
        'accountability': ('‚úÖ', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'),
        'daily_checkin': ('üìÖ', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫–∏–Ω'),
    }

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard_buttons = []
    for goal_key, (emoji, name) in goals_info.items():
        # –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
        check = "‚úÖ " if goal_key in selected else ""
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{check}{emoji} {name}",
                callback_data=f"goal:{goal_key}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚ú® –ì–æ—Ç–æ–≤–æ",
            callback_data="goals_done"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if callback.message:
        await callback.message.edit_text(
            "üéØ –î–ª—è —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?\n\n"
            "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ —Ü–µ–ª—å, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –≥–∞–ª–æ—á–∫—É.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª ‚ú®",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("goal:"))
async def toggle_goal(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏"""
    if not callback.data:
        return

    goal_value = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
    data = await state.get_data()
    selected = data.get('selected_goals', [])

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
    if goal_value in selected:
        selected.remove(goal_value)
    else:
        selected.append(goal_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_goals=selected)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await show_goals_selection(callback, selected)
    await callback.answer()


@router.callback_query(F.data == "goals_done")
async def save_goals(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏"""
    data = await state.get_data()
    selected = data.get('selected_goals', [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ enum
    goal_map = {
        'support': GFGoal.SUPPORT,
        'motivation': GFGoal.MOTIVATION,
        'chitchat': GFGoal.CHITCHAT,
        'advice': GFGoal.ADVICE,
        'learn_english': GFGoal.LEARN_ENGLISH,
        'project_ideas': GFGoal.PROJECT_IDEAS,
        'brainstorm': GFGoal.BRAINSTORM,
        'stress_relief': GFGoal.STRESS_RELIEF,
        'accountability': GFGoal.ACCOUNTABILITY,
        'daily_checkin': GFGoal.DAILY_CHECKIN,
    }

    goals_enums = [
        goal_map[key] for key in selected if key in goal_map
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with async_session_maker() as session:
        if goals_enums:
            await add_user_goals(
                session,
                telegram_id=callback.from_user.id,
                goals=goals_enums
            )
        await session.commit()

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} "
        f"–≤—ã–±—Ä–∞–ª —Ü–µ–ª–∏: {selected}"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
    await state.set_state(QuestionnaireStates.waiting_about)

    if callback.message:
        await callback.message.edit_text(
            "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ. –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? "
            "–ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–µ–±—è –∏ –æ–±—â–∞—Ç—å—Å—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ. üí´"
        )

    await callback.answer("–¶–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


@router.message(QuestionnaireStates.waiting_about)
async def save_about(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    about_text = message.text

    if not about_text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –æ —Å–µ–±–µ üòä"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with async_session_maker() as session:
        await update_user_about(
            session,
            telegram_id=message.from_user.id,
            about=about_text
        )
        await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(
            session,
            telegram_id=message.from_user.id
        )

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} "
        f"—Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–µ–±–µ ({len(about_text)} —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
    await state.clear()

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    if user:
        await message.answer(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ, {user.get_display_name()}!\n\n"
            "–¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é —Ç–µ–±—è –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ:\n"
            "‚úÖ –¢–≤–æ–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è\n"
            "‚úÖ –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n"
            "‚úÖ –¢–≤–æ–∏ —Ü–µ–ª–∏\n"
            "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n\n"
            "–Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ! üí´"
        )

        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message, user.get_display_name())
    else:
        await message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å üòä"
        )
