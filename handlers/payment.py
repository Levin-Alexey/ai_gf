"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏
"""
import logging
import uuid
from datetime import datetime, timezone

from aiogram import Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from yookassa import Configuration, Payment
from config import PAYMENT_SHOP_ID, PAYMENT_SECRET_KEY, PAYMENT_RETURN_URL

router = Router()
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = PAYMENT_SHOP_ID
Configuration.secret_key = PAYMENT_SECRET_KEY


@router.callback_query(lambda c: c.data == "pay")
async def handle_pay_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"""
    await callback.answer()
    
    await callback.message.answer(
        "üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üé≠ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º\n"
        "‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "<i>1 –º–µ—Å—è—Ü –¥–æ—Å—Ç—É–ø–∞ ‚Äî –≤—Å–µ–≥–æ 10‚ÇΩ</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìÖ 1 –º–µ—Å—è—Ü ‚Äî 10‚ÇΩ",
                callback_data="subscribe_1m"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_payment"
            )]
        ])
    )
    
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"
    )


@router.callback_query(lambda c: c.data.startswith("subscribe_"))
async def handle_subscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    period = callback.data.replace("subscribe_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞
    plans = {
        "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 10, "days": 30}
    }
    
    plan = plans.get(period)
    if not plan:
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    telegram_id = callback.from_user.id
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa
        idempotence_key = str(uuid.uuid4())
        
        payment = Payment.create({
            "amount": {
                "value": str(plan['price']),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": PAYMENT_RETURN_URL
            },
            "capture": True,
            "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ AI GF: {plan['name']}",
            "metadata": {
                "telegram_id": str(telegram_id),
                "days": str(plan['days']),
                "plan": period
            }
        }, idempotence_key)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = payment.confirmation.confirmation_url
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"–¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
            f"–°—É–º–º–∞: <b>{plan['price']}‚ÇΩ</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
            f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! ‚ú®",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                    url=payment_url
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_payment"
                )]
            ])
        )
        
        logger.info(
            f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂ –¥–ª—è {telegram_id}: "
            f"ID={payment.id}, —Ç–∞—Ä–∏—Ñ={period}, —Å—É–º–º–∞={plan['price']}‚ÇΩ"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callback_data="cancel_payment"
                )
            ]])
        )


@router.callback_query(lambda c: c.data == "cancel_payment")
async def handle_cancel_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã"""
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    
    await callback.message.edit_text(
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        reply_markup=None
    )
    
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–ª–∞—Ç—É"
    )
