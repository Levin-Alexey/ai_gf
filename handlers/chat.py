"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞ —Å AI
"""
import logging
import time
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import async_session_maker
from crud import get_user_by_telegram_id
from redis_client import redis_client
from queue_client import queue_client
from .menu import get_main_menu_keyboard

router = Router()
logger = logging.getLogger(__name__)

class ChatStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞"""
    chatting = State()

def get_chat_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@router.message(F.text == "üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç")
async def handle_start_chat(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —á–∞—Ç'"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        async with async_session_maker() as session:
            user = await get_user_by_telegram_id(
                session,
                telegram_id=message.from_user.id
            )

        if not user:
            await message.answer(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ù–∞–ø–∏—à–∏ /start"
            )
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        await state.set_state(ChatStates.chatting)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redis
        if message.from_user.id:
            await redis_client.set_user_chat_state(message.from_user.id, True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        if message.from_user.id:
            chat_history = await redis_client.get_chat_history(message.from_user.id)
        else:
            chat_history = []
        
        if chat_history:
            welcome_message = (
                f"üí¨ –ß–∞—Ç —Å {user.get_display_name()}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—à—É –±–µ—Å–µ–¥—É! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å üòä"
            )
        else:
            welcome_message = (
                f"üí¨ –ß–∞—Ç —Å {user.get_display_name()}\n\n"
                "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ - "
                "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! ü§ñ‚ú®"
            )

        await message.answer(
            welcome_message,
            reply_markup=get_chat_keyboard()
        )
        
        if message.from_user.id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —á–∞—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        await state.clear()
        if message.from_user.id:
            await redis_client.set_user_chat_state(message.from_user.id, False)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
        async with async_session_maker() as session:
            user = await get_user_by_telegram_id(
                session,
                telegram_id=message.from_user.id
            )
        
        if user:
            from .menu import show_main_menu
            await show_main_menu(message, user.get_display_name())
        else:
            await message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu_keyboard()
            )
            
        if message.from_user.id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def handle_clear_history(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é'"""
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ Redis
        if message.from_user.id:
            await redis_client.clear_chat_history(message.from_user.id)
        
        await message.answer(
            "üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üòä"
        )
        
        if message.from_user.id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(ChatStates.chatting)
async def handle_chat_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        user_message = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
        if user_id:
            is_chatting = await redis_client.get_user_chat_state(user_id)
        else:
            is_chatting = False
            
        if not is_chatting:
            await message.answer(
                "üí¨ –î–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —á–∞—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM
        queue_message = {
            "user_id": user_id,
            "chat_id": chat_id,
            "message": user_message,
            "timestamp": int(time.time())
        }
        
        queue_client.publish_message(queue_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...",
            reply_markup=get_chat_keyboard()
        )
        
        if user_id:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    # (–æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    pass
