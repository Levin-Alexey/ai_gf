"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)

from database import async_session_maker
from crud import (
    get_user_by_telegram_id, 
    get_active_personas, 
    get_user_current_persona, 
    set_user_persona,
    get_persona_by_id
)

router = Router()
logger = logging.getLogger(__name__)


async def send_persona_images(message: Message, personas):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    try:
        # –°–ª–æ–≤–∞—Ä—å —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL)
        persona_images = {
            '–ù–µ–π—Ä–∞': 'https://example.com/neira.jpg',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL
            '–§–æ–∫—Å': 'https://example.com/fox.jpg',
            '–õ–∏–Ω–∞': 'https://example.com/lina.jpg', 
            '–≠–≤–∞': 'https://example.com/eva.jpg',
            '–†–µ–π–Ω–∞': 'https://example.com/reyna.jpg'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å URL
        for persona in personas:
            if persona.avatar_url:
                try:
                    await message.answer_photo(
                        photo=persona.avatar_url,
                        caption=f"üë§ **{persona.name}**\n{persona.short_desc}",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {persona.name}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")




@router.message(F.text == "üé® –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä")
async def handle_character_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä'"""
    logger.info(f"üé® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await _show_character_settings(message)




async def _show_character_settings(message: Message, from_user=None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
    if not message:
        return
    user_id = from_user.id if from_user else message.from_user.id
    
    async with async_session_maker() as session:
        user = await get_user_by_telegram_id(session, telegram_id=user_id)

    if user:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å
        async with async_session_maker() as session:
            current_persona = await get_user_current_persona(session, user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        tone_text = user.tone.value if user.tone else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        interests_count = len(user.interests) if user.interests else 0
        goals_count = len(user.goals) if user.goals else 0
        persona_text = current_persona.name if current_persona else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"

        character_text = (
            f"üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:\n\n"
            f"üë§ –õ–∏—á–Ω–æ—Å—Ç—å: {persona_text}\n"
            f"üé® –¢–æ–Ω –æ–±—â–µ–Ω–∏—è: {tone_text}\n"
            f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤: {interests_count}\n"
            f"üéØ –¶–µ–ª–µ–π: {goals_count}\n"
            f"üìù –û —Å–µ–±–µ: {'–ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if user.about else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –í—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="select_persona")],
                [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è", callback_data="change_tone")],
                [InlineKeyboardButton(text="üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="my_interests")],
                [InlineKeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="my_goals")],
                [InlineKeyboardButton(text="üìù –û —Å–µ–±–µ", callback_data="about_me")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
            ]
        )
        await message.answer(character_text, reply_markup=keyboard)
    else:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ù–∞–ø–∏—à–∏ /start"
        )




async def handle_select_persona(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        personas = await get_active_personas(session)
        
        if not personas:
            await message.answer(
                "üë§ –í—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π. "
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å! ‚ú®"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
        keyboard_buttons = []
        
        # –≠–º–æ–¥–∑–∏-–∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        persona_emojis = {
            '–ù–µ–π—Ä–∞': 'üåå',  # –∫–æ—Å–º–æ—Å
            '–§–æ–∫—Å': 'üïµÔ∏è',   # –¥–µ—Ç–µ–∫—Ç–∏–≤
            '–õ–∏–Ω–∞': '‚òï',    # —É—é—Ç
            '–≠–≤–∞': 'üìö',     # –∫–Ω–∏–≥–∏/–∫—É–ª—å—Ç—É—Ä–∞
            '–†–µ–π–Ω–∞': 'üíª'    # —Ö–∞–∫–µ—Ä
        }
        
        for persona in personas:
            emoji = persona_emojis.get(persona.name, 'üë§')
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{emoji} {persona.name}",
                    callback_data=f"select_persona_{persona.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                callback_data="back_to_character_settings"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        personas_text = "üë§ –í—ã–±–µ—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
        for persona in personas:
            personas_text += f"üë§ **{persona.name}**\n{persona.short_desc}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            personas_text, 
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await send_persona_images(message, personas)






# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "select_persona")
async def handle_select_persona_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å'"""
    await handle_select_persona(callback.message)
    await callback.answer()


@router.callback_query(F.data == "change_tone")
async def handle_change_tone_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è'"""
    await callback.message.answer("üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    await callback.answer()


@router.callback_query(F.data == "my_interests")
async def handle_my_interests_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã'"""
    await callback.message.answer("üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    await callback.answer()


@router.callback_query(F.data == "my_goals")
async def handle_my_goals_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Ü–µ–ª–∏'"""
    await callback.message.answer("üéØ –ú–æ–∏ —Ü–µ–ª–∏ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    await callback.answer()


@router.callback_query(F.data == "about_me")
async def handle_about_me_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û —Å–µ–±–µ'"""
    await callback.message.answer("üìù –û —Å–µ–±–µ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def handle_back_to_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'"""
    from .menu import handle_settings
    await handle_settings(callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("select_persona_"))
async def handle_persona_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ callback"""
    persona_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID
        selected_persona = await get_persona_by_id(session, persona_id)
        
        if not selected_persona:
            await callback.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(
            session,
            telegram_id=callback.from_user.id
        )
        
        if not user:
            await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_persona(session, user.id, selected_persona.id)
        await session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å **{selected_persona.name}** –≤—ã–±—Ä–∞–Ω–∞!\n\n"
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ –æ–±—Ä–∞–∑–µ {selected_persona.name}.\n\n"
            f"**{selected_persona.short_desc}**\n\n"
            f"–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —á–∞—Ç –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É! üí´",
            parse_mode="Markdown"
        )
        
        await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å: {selected_persona.name}")


@router.callback_query(F.data == "back_to_character_settings")
async def handle_back_to_character_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'"""
    await callback.message.delete()
    await handle_character_settings(callback.message)
    await callback.answer()


