"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)

from database import async_session_maker
from crud import (
    get_user_by_telegram_id,
    get_active_personas,
    get_user_current_persona,
    set_user_persona,
    get_persona_by_id,
    update_user_tone
)
from models import GFTone

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_character_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä'"""
    logger.info(
        f"üé® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä' "
        f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
    )
    await _show_character_settings(message)


async def _show_character_settings(message: Message, from_user=None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
    if not message:
        return
    user_id = from_user.id if from_user else message.from_user.id

    async with async_session_maker() as session:
        user = await get_user_by_telegram_id(
            session, telegram_id=user_id
        )

    if user:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å
        async with async_session_maker() as session:
            current_persona = await get_user_current_persona(
                session, user.id
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        tone_text = user.tone.value if user.tone else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        interests_count = len(user.interests) if user.interests else 0
        goals_count = len(user.goals) if user.goals else 0
        persona_text = (
            current_persona.name if current_persona else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
        )

        character_text = (
            f"üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:\n\n"
            f"üë§ –õ–∏—á–Ω–æ—Å—Ç—å: {persona_text}\n"
            f"üé® –¢–æ–Ω –æ–±—â–µ–Ω–∏—è: {tone_text}\n"
            f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å–æ–≤: {interests_count}\n"
            f"üéØ –¶–µ–ª–µ–π: {goals_count}\n"
            f"üìù –û —Å–µ–±–µ: "
            f"{'–ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if user.about else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë§ –í—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å",
                        callback_data="select_persona"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è",
                        callback_data="change_tone"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã",
                        callback_data="my_interests"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üéØ –ú–æ–∏ —Ü–µ–ª–∏",
                        callback_data="my_goals"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –û —Å–µ–±–µ",
                        callback_data="about_me"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )
                ]
            ]
        )
        await message.answer(character_text, reply_markup=keyboard)
    else:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ù–∞–ø–∏—à–∏ /start"
        )


async def show_tone_selection_for_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
                    callback_data="tone_settings:friendly"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíñ –ù–µ–∂–Ω—ã–π",
                    callback_data="tone_settings:gentle"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üòé –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
                    callback_data="tone_settings:neutral"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üòè –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π",
                    callback_data="tone_settings:sarcastic"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π",
                    callback_data="tone_settings:formal"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_character_settings"
                )
            ]
        ]
    )

    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            "üé® –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:\n\n"
            "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π ‚Äî —Ç—ë–ø–ª—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π\n"
            "üíñ –ù–µ–∂–Ω—ã–π ‚Äî –º—è–≥–∫–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π\n"
            "üòé –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π\n"
            "üòè –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π ‚Äî —Å —é–º–æ—Ä–æ–º –∏ –∏—Ä–æ–Ω–∏–µ–π\n"
            "üé© –§–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π",
            reply_markup=keyboard
        )


async def handle_select_persona(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        personas = await get_active_personas(session)

        if not personas:
            await message.answer(
                "üë§ –í—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π. "
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... "
                "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å! ‚ú®"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await message.answer(
            "üë§ –í—ã–±–µ—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å:",
            parse_mode="Markdown"
        )

        # –≠–º–æ–¥–∑–∏-–∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        persona_emojis = {
            '–ù–µ–π—Ä–∞': 'üåå',  # –∫–æ—Å–º–æ—Å
            '–§–æ–∫—Å': 'üïµÔ∏è',   # –¥–µ—Ç–µ–∫—Ç–∏–≤
            '–õ–∏–Ω–∞': '‚òï',    # —É—é—Ç
            '–≠–≤–∞': 'üìö',     # –∫–Ω–∏–≥–∏/–∫—É–ª—å—Ç—É—Ä–∞
            '–†–µ–π–Ω–∞': 'üíª'    # —Ö–∞–∫–µ—Ä
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ª–∏—á–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for persona in personas:
            emoji = persona_emojis.get(persona.name, 'üë§')

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{emoji} –í—ã–±—Ä–∞—Ç—å {persona.name}",
                            callback_data=f"select_persona_{persona.id}"
                        )
                    ]
                ]
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = (
                f"üë§ **{persona.name}**\n\n{persona.short_desc}"
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
            if persona.avatar_url:
                try:
                    await message.answer_photo(
                        photo=persona.avatar_url,
                        caption=caption,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "
                        f"–¥–ª—è {persona.name}: {e}"
                    )
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await message.answer(
                        caption,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
                await message.answer(
                    caption,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_character_settings"
                    )
                ]
            ]
        )
        await message.answer(
            "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥:", reply_markup=back_keyboard
        )


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "select_persona")
async def handle_select_persona_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å'"""
    if callback.message and hasattr(callback.message, 'answer'):
        await handle_select_persona(callback.message)
    await callback.answer()


@router.callback_query(F.data == "change_tone")
async def handle_change_tone_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è'"""
    await show_tone_selection_for_settings(callback)
    await callback.answer()


@router.callback_query(F.data.startswith("tone_settings:"))
async def process_tone_selection_for_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    if not callback.data:
        return

    tone_value = callback.data.split(":")[1]

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ enum
    tone_map = {
        'friendly': GFTone.FRIENDLY,
        'gentle': GFTone.GENTLE,
        'neutral': GFTone.NEUTRAL,
        'sarcastic': GFTone.SARCASTIC,
        'formal': GFTone.FORMAL,
    }

    selected_tone = tone_map.get(tone_value)

    if selected_tone and callback.message:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session_maker() as session:
            await update_user_tone(
                session,
                telegram_id=callback.from_user.id,
                tone=selected_tone
            )
            await session.commit()

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} "
            f"–∏–∑–º–µ–Ω–∏–ª —Ç–æ–Ω –Ω–∞: {tone_value}"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        tone_names = {
            'friendly': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
            'gentle': '–ù–µ–∂–Ω—ã–π',
            'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
            'sarcastic': '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π',
            'formal': '–§–æ—Ä–º–∞–ª—å–Ω—ã–π',
        }

        if hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                f"‚úÖ –¢–æ–Ω –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ **{tone_names[tone_value]}**!\n\n"
                f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ. "
                f"–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —á–∞—Ç –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É! üí´",
                parse_mode="Markdown"
            )

        await callback.answer("–¢–æ–Ω –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω!")
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")


@router.callback_query(F.data == "my_interests")
async def handle_my_interests_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã'"""
    if callback.message:
        await callback.message.answer(
            "üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
        )
    await callback.answer()


@router.callback_query(F.data == "my_goals")
async def handle_my_goals_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Ü–µ–ª–∏'"""
    if callback.message:
        await callback.message.answer(
            "üéØ –ú–æ–∏ —Ü–µ–ª–∏ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
        )
    await callback.answer()


@router.callback_query(F.data == "about_me")
async def handle_about_me_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û —Å–µ–±–µ'"""
    if callback.message:
        await callback.message.answer(
            "üìù –û —Å–µ–±–µ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
        )
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def handle_back_to_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'"""
    from .menu import handle_settings
    if callback.message:
        await handle_settings(callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("select_persona_"))
async def handle_persona_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ callback"""
    if not callback.data:
        return

    persona_id = int(callback.data.split("_")[2])

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID
        selected_persona = await get_persona_by_id(session, persona_id)

        if not selected_persona:
            await callback.answer(
                "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(
            session,
            telegram_id=callback.from_user.id
        )

        if not user:
            await callback.answer(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É", show_alert=True
            )
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_persona(session, user.id, selected_persona.id)
        await session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å **{selected_persona.name}** –≤—ã–±—Ä–∞–Ω–∞!\n\n"
                f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ –æ–±—Ä–∞–∑–µ "
                f"{selected_persona.name}.\n\n"
                f"**{selected_persona.short_desc}**\n\n"
                f"–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —á–∞—Ç –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É! üí´",
                parse_mode="Markdown"
            )

        await callback.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å: {selected_persona.name}"
        )


@router.callback_query(F.data == "back_to_character_settings")
async def handle_back_to_character_settings_callback(
    callback: CallbackQuery
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'"""
    if callback.message and hasattr(callback.message, 'delete'):
        await callback.message.delete()
        await handle_character_settings(callback.message)
    await callback.answer()
