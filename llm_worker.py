"""
–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM
"""
import logging
import asyncio
import aiohttp
from typing import Dict, Any, List
from queue_client import queue_client
from redis_client import redis_client
from bot_integration import bot_integration
from memory_client import memory_client
from models import MemoryType, MemoryImportance
from config import LLM_API_URL, LLM_API_KEY, LLM_MODEL
from database import async_session_maker
from crud import (
    get_persona_by_id,
    get_user_persona_setting,
    get_user_by_telegram_id
)

logger = logging.getLogger(__name__)


class LLMWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM API"""
    
    def __init__(self):
        self.session = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ LLM Worker...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
            await redis_client.connect()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RabbitMQ...")
            await queue_client.connect()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–æ—Ç–æ–º
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot Integration...")
            await bot_integration.initialize()
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
            self.session = aiohttp.ClientSession()
            logger.info("üåê HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            logger.info("‚úÖ LLM Worker —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            logger.info("üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ RabbitMQ...")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            try:
                await queue_client.consume_requests(self.handle_llm_request)
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞")
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
                raise
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ LLM Worker: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            await queue_client.stop_consuming()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
            if self.session:
                await self.session.close()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            await redis_client.disconnect()
            await queue_client.disconnect()
            await bot_integration.close()
            
            logger.info("LLM Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ LLM Worker: {e}")
    
    async def handle_llm_request(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            await self.process_llm_request(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ LLM: {e}")
    
    async def process_llm_request(self, message: Dict[str, Any]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
        try:
            user_id = message.get('user_id')
            user_message = message.get('message')
            chat_id = message.get('chat_id')
            persona_id = message.get('persona_id')
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:50]}...")
            
            if not all([user_id, user_message, chat_id]):
                logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
            if not isinstance(user_id, int) or not isinstance(chat_id, int):
                logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã user_id –∏–ª–∏ chat_id")
                return
                
            if not isinstance(user_message, str):
                logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø user_message")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ Redis
            chat_history = await redis_client.get_chat_history(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            semantic_memories = await memory_client.search_semantic_memories(
                user_id=user_id,
                query=user_message,
                limit=15
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            important_memories = await memory_client.get_user_memories(
                user_id, 
                importance_min=MemoryImportance.HIGH,
                limit=10
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —ç–º–æ—Ü–∏–∏
            recent_emotions = await memory_client.get_recent_emotions(user_id, days=3, limit=5)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            persona = None
            persona_overrides = {}
            if persona_id:
                async with async_session_maker() as session:
                    persona = await get_persona_by_id(session, persona_id)
                    if persona:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID
                        user = await get_user_by_telegram_id(
                            session, telegram_id=user_id
                        )
                        if user:
                            persona_setting = await get_user_persona_setting(
                                session, user.id
                            )
                            if persona_setting:
                                persona_overrides = persona_setting.overrides
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            messages = self.build_llm_context(
                chat_history, 
                user_message, 
                semantic_memories, 
                important_memories, 
                recent_emotions,
                persona,
                persona_overrides
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM API
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            llm_response = await self.call_llm_api(messages)
            
            if llm_response:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis
                await redis_client.add_message(user_id, "user", user_message)
                await redis_client.add_message(user_id, "assistant", llm_response)
                logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
                logger.info(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self._analyze_and_save_memories(user_id, user_message, llm_response)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç
                await self.send_response_to_bot(chat_id, llm_response)
                logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = ("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "
                               "–≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await self.send_response_to_bot(chat_id, error_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ LLM: {e}")
    
    def build_llm_context(
        self, 
        chat_history: List[Dict], 
        user_message: str, 
        semantic_memories: List = None,
        important_memories: List = None,
        recent_emotions: List = None,
        persona = None,
        persona_overrides: dict = None
    ) -> List[Dict]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
        messages = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏
        system_content = self._build_system_message(
            semantic_memories, 
            important_memories, 
            recent_emotions,
            persona,
            persona_overrides or {}
        )
        
        system_message = {
            "role": "system",
            "content": system_content
        }
        messages.append(system_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        for msg in chat_history:
            if msg.get('role') in ['user', 'assistant']:
                messages.append({
                    "role": msg['role'],
                    "content": msg['content']
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({
            "role": "user",
            "content": user_message
        })
        
        return messages
    
    def _build_system_message(
        self, 
        semantic_memories: List = None, 
        important_memories: List = None, 
        recent_emotions: List = None,
        persona = None,
        persona_overrides: dict = None
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω
        if persona:
            base_prompt = persona.prompt_template + "\n\n"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if persona_overrides:
                if 'prompt_addition' in persona_overrides:
                    base_prompt += persona_overrides['prompt_addition'] + "\n\n"
        else:
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            base_prompt = (
                "–¢—ã AI-–¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–µ–¥–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. "
                "–¢—ã –ø–æ–º–Ω–∏—à—å –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –Ω–µ–º, –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è. "
                "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å —Ç–µ–ø–ª–æ–π, –∑–∞–±–æ—Ç–ª–∏–≤–æ–π –∏ –ø–æ–Ω–∏–º–∞—é—â–µ–π. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if semantic_memories:
            base_prompt += "–†–ï–õ–ï–í–ê–ù–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï (–Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–º—ã—Å–ª—É):\n"
            for mem_data in semantic_memories[:8]:  # –¢–æ–ø-8 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                memory = mem_data["memory"]
                similarity = mem_data["similarity"]
                base_prompt += f"- {memory.content} (—Ç–∏–ø: {memory.memory_type.value}, —Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})\n"
            base_prompt += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if important_memories:
            base_prompt += "–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:\n"
            for memory in important_memories[:5]:  # –¢–æ–ø-5 –≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                base_prompt += f"- {memory.content} (—Ç–∏–ø: {memory.memory_type.value}, –≤–∞–∂–Ω–æ—Å—Ç—å: {memory.importance.value})\n"
            base_prompt += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —ç–º–æ—Ü–∏–∏
        if recent_emotions:
            base_prompt += "–ù–ï–î–ê–í–ù–ò–ï –≠–ú–û–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n"
            for emotion in recent_emotions:
                base_prompt += f"- {emotion.emotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {emotion.intensity:.1f})"
                if emotion.context:
                    base_prompt += f" - {emotion.context}"
                base_prompt += "\n"
            base_prompt += "\n"
        
        base_prompt += (
            "–ò–ù–°–¢–†–£–ö–¶–ò–ò:\n"
            "- –ü–æ–º–Ω–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            "- –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω–æ–π –∏ —É—á–∏—Ç—ã–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "- –°—Ç—Ä–æ–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "- –ï—Å–ª–∏ —É–∑–Ω–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ\n"
            "- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ —Ç–µ–ø–ª–æ–π –≤ –æ–±—â–µ–Ω–∏–∏"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if persona and persona.reply_style:
            base_prompt += "\n\n–°–¢–ò–õ–¨ –û–¢–í–ï–¢–û–í:\n"
            reply_style = persona.reply_style
            
            if 'pace' in reply_style:
                base_prompt += f"- –¢–µ–º–ø –æ–±—â–µ–Ω–∏—è: {reply_style['pace']}\n"
            if 'length' in reply_style:
                base_prompt += f"- –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: {reply_style['length']}\n"
            if 'structure' in reply_style:
                base_prompt += f"- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {reply_style['structure']}\n"
            if 'signatures' in reply_style:
                base_prompt += f"- –ü–æ–¥–ø–∏—Å–∏/—Ñ—Ä–∞–∑—ã: {reply_style['signatures']}\n"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–∏–ª—è
            if persona_overrides and 'reply_style' in persona_overrides:
                custom_style = persona_overrides['reply_style']
                base_prompt += "\n–ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò –°–¢–ò–õ–Ø:\n"
                for key, value in custom_style.items():
                    base_prompt += f"- {key}: {value}\n"
        
        return base_prompt
    
    async def _analyze_and_save_memories(self, user_id: int, user_message: str, llm_response: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            message_lower = user_message.lower()
            
            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            emotion_keywords = {
                'happy': ['—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '—É—Ä–∞'],
                'sad': ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–¥–µ–ø—Ä–µ—Å—Å–∏—è'],
                'anxious': ['–≤–æ–ª–Ω—É—é—Å—å', '–±–µ—Å–ø–æ–∫–æ—é—Å—å', '—Ç—Ä–µ–≤–æ–∂–Ω–æ', '–Ω–µ—Ä–≤–Ω–∏—á–∞—é', '–ø–µ—Ä–µ–∂–∏–≤–∞—é'],
                'excited': ['–≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω', '–≤–æ—Å—Ç–æ—Ä–≥', '–Ω–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è', '—Å—É–ø–µ—Ä'],
                'angry': ['–∑–ª–æ–π', '—Ä–∞–∑–æ–∑–ª–∏–ª—Å—è', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '—è—Ä–æ—Å—Ç—å'],
                'tired': ['—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–∞', '—É—Å—Ç–∞–ª–æ—Å—Ç—å', '–∏–∑–º–æ—Ç–∞–Ω', '–≤—ã–∂–∞—Ç']
            }
            
            detected_emotion = None
            for emotion, keywords in emotion_keywords.items():
                if any(keyword in message_lower for keyword in keywords):
                    detected_emotion = emotion
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ—Ü–∏—é –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
            if detected_emotion:
                intensity = 0.7  # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
                await memory_client.add_emotion(
                    user_id=user_id,
                    emotion=detected_emotion,
                    intensity=intensity,
                    context=user_message[:200]  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —ç–º–æ—Ü–∏—è {detected_emotion} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            fact_keywords = ['—è', '–º–µ–Ω—è', '–º–æ–π', '–º–æ—è', '–º–æ–µ', '–º–Ω–µ', '—É –º–µ–Ω—è', '—è —Ä–∞–±–æ—Ç–∞—é', '—è –∂–∏–≤—É', '—è —É—á—É—Å—å']
            if any(keyword in message_lower for keyword in fact_keywords):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                importance = MemoryImportance.MEDIUM
                if any(word in message_lower for word in ['–≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '—Å–µ—Ä—å–µ–∑–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞']):
                    importance = MemoryImportance.HIGH
                elif any(word in message_lower for word in ['–º–µ—á—Ç–∞—é', '—Ö–æ—á—É', '—Ü–µ–ª—å', '–ø–ª–∞–Ω–∏—Ä—É—é']):
                    importance = MemoryImportance.HIGH
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–∫—Ç
                await memory_client.add_memory(
                    user_id=user_id,
                    content=user_message,
                    memory_type=MemoryType.FACT,
                    importance=importance,
                    tags=self._extract_tags(user_message)
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            preference_keywords = ['–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é', '–≤—ã–±–∏—Ä–∞—é', '–º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–Ω–µ –ª—é–±–ª—é', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è']
            if any(keyword in message_lower for keyword in preference_keywords):
                await memory_client.add_memory(
                    user_id=user_id,
                    content=user_message,
                    memory_type=MemoryType.PREFERENCE,
                    importance=MemoryImportance.MEDIUM,
                    tags=self._extract_tags(user_message)
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ü–µ–ª–∏ –∏ –º–µ—á—Ç—ã
            goal_keywords = ['—Ö–æ—á—É', '–º–µ—á—Ç–∞—é', '—Ü–µ–ª—å', '–ø–ª–∞–Ω–∏—Ä—É—é', '–Ω–∞–¥–µ—é—Å—å', '—Å—Ç—Ä–µ–º–∏—Å—å', '–∂–µ–ª–∞—é']
            if any(keyword in message_lower for keyword in goal_keywords):
                await memory_client.add_memory(
                    user_id=user_id,
                    content=user_message,
                    memory_type=MemoryType.GOAL,
                    importance=MemoryImportance.HIGH,
                    tags=self._extract_tags(user_message)
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ü–µ–ª—å/–º–µ—á—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
            relationship_keywords = ['–º–∞–º–∞', '–ø–∞–ø–∞', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '–¥—Ä—É–≥', '–ø–æ–¥—Ä—É–≥–∞', '–∂–µ–Ω–∞', '–º—É–∂', '–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞', '–∫–æ–ª–ª–µ–≥–∞']
            if any(keyword in message_lower for keyword in relationship_keywords):
                await memory_client.add_memory(
                    user_id=user_id,
                    content=user_message,
                    memory_type=MemoryType.RELATIONSHIP,
                    importance=MemoryImportance.MEDIUM,
                    tags=self._extract_tags(user_message)
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def _extract_tags(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        tags = []
        text_lower = text.lower()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        tag_keywords = {
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—é', '–æ—Ñ–∏—Å', '–∫–∞—Ä—å–µ—Ä–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è'],
            '—Å–µ–º—å—è': ['—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–º–∞–º–∞', '–ø–∞–ø–∞', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞'],
            '–¥—Ä—É–∑—å—è': ['–¥—Ä—É–∑—å—è', '–¥—Ä—É–≥', '–ø–æ–¥—Ä—É–≥–∞', '–∫–æ–º–ø–∞–Ω–∏—è'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–±–æ–ª–µ–∑–Ω—å', '–≤—Ä–∞—á', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ª–µ—á–µ–Ω–∏–µ'],
            '—Ö–æ–±–±–∏': ['—Ö–æ–±–±–∏', '—É–≤–ª–µ—á–µ–Ω–∏–µ', '—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '–∫–Ω–∏–≥–∏', '—Ñ–∏–ª—å–º—ã'],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–æ—Ç–ø—É—Å–∫', '—Å—Ç—Ä–∞–Ω–∞', '–≥–æ—Ä–æ–¥', '–ø–æ–µ–∑–¥–∫–∞'],
            '—É—á–µ–±–∞': ['—É—á–µ–±–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '—à–∫–æ–ª–∞', '—ç–∫–∑–∞–º–µ–Ω', '–¥–∏–ø–ª–æ–º'],
            '—Ñ–∏–Ω–∞–Ω—Å—ã': ['–¥–µ–Ω—å–≥–∏', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–ø–æ–∫—É–ø–∫–∞', '—Ç—Ä–∞—Ç–∞', '—ç–∫–æ–Ω–æ–º–∏—è']
        }
        
        for tag, keywords in tag_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                tags.append(tag)
        
        return tags
    
    async def call_llm_api(self, messages: List[Dict]) -> str:
        """–í—ã–∑–æ–≤ LLM API"""
        try:
            headers = {
                "Authorization": f"Bearer {LLM_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://ai-gf-bot.com",  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è OpenRouter
                "X-Title": "AI Girlfriend Bot"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è OpenRouter
            }
            
            data = {
                "model": LLM_MODEL,
                "messages": messages,
                "max_tokens": 1000,
                "temperature": 0.7
            }
            
            async with self.session.post(
                LLM_API_URL,
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content'].strip()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ LLM API: {response.status}")
                    return ""
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM API: {e}")
            return ""
    
    async def send_response_to_bot(self, chat_id: int, response: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–æ—Ç–æ–º
            await bot_integration.send_message_to_user(chat_id, response)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–æ—Ç: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
llm_worker = LLMWorker()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    worker = LLMWorker()
    try:
        await worker.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await worker.stop()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
