"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ –Ω–∞ VDS —Å–µ—Ä–≤–µ—Ä–µ
"""
import logging
import pika
import socket
from config import RABBITMQ_HOST, RABBITMQ_PORT, RABBITMQ_USER, RABBITMQ_PASSWORD, RABBITMQ_VHOST

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def test_network_connectivity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    try:
        logger.info(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {RABBITMQ_HOST}:{RABBITMQ_PORT}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        result = sock.connect_ex((RABBITMQ_HOST, RABBITMQ_PORT))
        sock.close()
        
        if result == 0:
            logger.info("‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.error(f"‚ùå TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: –∫–æ–¥ {result}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_rabbitmq_with_timeouts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º RabbitMQ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
    timeouts = [10, 30, 60]  # –°–µ–∫—É–Ω–¥—ã
    
    for timeout in timeouts:
        try:
            logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º RabbitMQ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout} —Å–µ–∫—É–Ω–¥...")
            
            # –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASSWORD)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            parameters = pika.ConnectionParameters(
                host=RABBITMQ_HOST,
                port=RABBITMQ_PORT,
                virtual_host=RABBITMQ_VHOST,
                credentials=credentials,
                connection_attempts=1,
                retry_delay=1,
                socket_timeout=timeout,
                blocked_connection_timeout=timeout,
                heartbeat=0  # –û—Ç–∫–ª—é—á–∞–µ–º heartbeat –¥–ª—è —Ç–µ—Å—Ç–∞
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            logger.info("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            connection = pika.BlockingConnection(parameters)
            
            logger.info("üìã –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª...")
            channel = connection.channel()
            
            logger.info("üóÇ –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–∏...")
            channel.queue_declare(queue='test_queue', durable=True)
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            channel.basic_publish(
                exchange='',
                routing_key='test_queue',
                body='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                properties=pika.BasicProperties(delivery_mode=2)
            )
            
            logger.info("üîö –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            connection.close()
            
            logger.info(f"‚úÖ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout} —Å–µ–∫—É–Ω–¥!")
            return True
            
        except pika.exceptions.AMQPConnectionError as e:
            logger.error(f"‚ùå AMQP –æ—à–∏–±–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}—Å: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}—Å: {e}")
    
    return False

def test_rabbitmq_guest():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å guest/guest (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å guest/guest...")
        
        credentials = pika.PlainCredentials('guest', 'guest')
        parameters = pika.ConnectionParameters(
            host=RABBITMQ_HOST,
            port=RABBITMQ_PORT,
            virtual_host='/',
            credentials=credentials,
            socket_timeout=30
        )
        
        connection = pika.BlockingConnection(parameters)
        connection.close()
        
        logger.info("‚úÖ Guest –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Guest –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É RabbitMQ –Ω–∞ VDS...")
    logger.info("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info(f"üìä –°–µ—Ä–≤–µ—Ä: {RABBITMQ_HOST}:{RABBITMQ_PORT}")
    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {RABBITMQ_USER}")
    logger.info(f"üìä –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç: {RABBITMQ_VHOST}")
    logger.info("=" * 60)
    
    # –¢–µ—Å—Ç 1: –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    logger.info("\nüåê –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    if not test_network_connectivity():
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
        return False
    
    # –¢–µ—Å—Ç 2: RabbitMQ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    logger.info("\nüê∞ –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º RabbitMQ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏")
    if test_rabbitmq_with_timeouts():
        logger.info("üéâ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    
    # –¢–µ—Å—Ç 3: Guest –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    logger.info("\nüë§ –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º guest –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    if test_rabbitmq_guest():
        logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ guest —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.warning("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        return False
    
    logger.error("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
    logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    logger.error("   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (admin/password)")
    logger.error("   2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç '/'")
    logger.error("   3. RabbitMQ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    logger.error("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π—Ä–≤–æ–ª–æ–º –Ω–∞ VDS —Å–µ—Ä–≤–µ—Ä–µ")
    
    return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã!")