"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
"""
import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        database_url = os.getenv('DATABASE_URL')
        print(f"üîó DATABASE_URL: {database_url}")
        
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
            return
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è asyncpg
        if database_url.startswith('postgresql+asyncpg://'):
            database_url = database_url.replace('postgresql+asyncpg://', 'postgresql://')
        
        print(f"üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL: {database_url}")
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        for table in tables:
            print(f"   - {table['table_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–∞–º—è—Ç–∏:")
        new_tables = ['user_memories', 'user_emories', 'user_relationships']
        
        for table_name in new_tables:
            exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = $1
                )
            """, table_name)
            
            if exists:
                print(f"   ‚úÖ {table_name} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå {table_name} - –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum —Ç–∏–ø—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º enum —Ç–∏–ø—ã:")
        enum_types = ['memory_type', 'memory_importance']
        
        for enum_name in enum_types:
            exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM pg_type 
                    WHERE typname = $1
                )
            """, enum_name)
            
            if exists:
                print(f"   ‚úÖ {enum_name} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå {enum_name} - –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        await conn.close()
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

if __name__ == "__main__":
    asyncio.run(test_connection())
