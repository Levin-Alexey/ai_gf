import os
from typing import AsyncGenerator

from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)
from sqlalchemy.pool import NullPool

from models import Base


# –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ü–ï–†–ï–î –ø–æ–ª—É—á–µ–Ω–∏–µ–º DATABASE_URL
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv(
    'DATABASE_URL',
    'postgresql+asyncpg://user:password@localhost/ai_gf'
)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
engine = create_async_engine(
    DATABASE_URL,
    echo=False,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_size=5,
    max_overflow=10,
    connect_args={
        "ssl": False,  # –û—Ç–∫–ª—é—á–∞–µ–º SSL –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        "timeout": 30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥
    }
)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
async_session_maker = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False,
)


async def init_db() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü).
    –í–ù–ò–ú–ê–ù–ò–ï: Enum —Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ SQL!
    """
    import logging
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
        logger.info(f"üìä DATABASE_URL: {DATABASE_URL}")
        
        async with engine.begin() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–Ω–æ –Ω–µ enum —Ç–∏–ø—ã!)
            await conn.run_sync(Base.metadata.create_all)
        
        logger.info("‚úÖ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å–µ—Ä–≤–µ—Ä—É")
        raise


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î.
    """
    async with async_session_maker() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


async def close_db() -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    await engine.dispose()
