#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–æ–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ LLM
"""
import asyncio
import logging
from sqlalchemy import text
from database import async_session_maker, init_db
from crud import get_persona_by_id, get_user_persona_setting

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_persona_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    try:
        await init_db()
        
        logger.info("=" * 80)
        logger.info("üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ LLM")
        logger.info("=" * 80)
        
        async with async_session_maker() as session:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≠–≤—É –ø–æ ID
            logger.info("\nüìç –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≠–≤–∞ –ø–æ –∫–ª—é—á—É")
            result = await session.execute(
                text("SELECT id, key, name FROM personas WHERE key = 'Eva'")
            )
            row = result.fetchone()
            
            if not row:
                logger.error("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –≠–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            eva_id = row[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: ID={eva_id}, key={row[1]}, name={row[2]}")
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é (–∫–∞–∫ –≤ –∫–æ–¥–µ)
            logger.info(f"\nüìç –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ get_persona_by_id({eva_id})")
            persona = await get_persona_by_id(session, eva_id)
            
            if not persona:
                logger.error("‚ùå –§—É–Ω–∫—Ü–∏—è get_persona_by_id –≤–µ—Ä–Ω—É–ª–∞ None!")
                return
            
            logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–µ–Ω: {persona.name}")
            logger.info(f"   - Key: {persona.key}")
            logger.info(f"   - Active: {persona.is_active}")
            logger.info(f"   - Reply style emojis: {persona.reply_style.get('emojis')}")
            logger.info(f"   - Signatures: {persona.reply_style.get('signatures')}")
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç
            logger.info("\nüìç –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ prompt_template")
            prompt = persona.prompt_template
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            checks = {
                "—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è": "—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è" in prompt,
                "–≤–ª—é–±–ª—ë–Ω–Ω–∞—è –¥–µ–≤—É—à–∫–∞": "–≤–ª—é–±–ª—ë–Ω–Ω–∞—è –¥–µ–≤—É—à–∫–∞" in prompt,
                "—Ñ–ª–∏—Ä—Ç—É–π": "—Ñ–ª–∏—Ä—Ç—É–π" in prompt.lower(),
                "—ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π": "—ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π" in prompt,
                "–≥–µ—Ä–æ–π": "–≥–µ—Ä–æ–π" in prompt,
                "AI –∑–∞–ø—Ä–µ—Ç": "–ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∞–∑—ã–≤–∞–π —Å–µ–±—è AI" in prompt,
                "—ç–º–æ–¥–∑–∏ üíã": "üíã" in prompt,
                "—ç–º–æ–¥–∑–∏ üî•": "üî•" in prompt,
            }
            
            all_passed = True
            for check_name, passed in checks.items():
                status = "‚úÖ" if passed else "‚ùå"
                logger.info(f"   {status} {check_name}: {'–Ω–∞–π–¥–µ–Ω–æ' if passed else '–ù–ï –ù–ê–ô–î–ï–ù–û'}")
                if not passed:
                    all_passed = False
            
            # –®–∞–≥ 4: –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _build_system_message
            logger.info("\nüìç –®–ê–ì 4: –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _build_system_message")
            
            if persona:
                base_prompt = persona.prompt_template + "\n\n"
                logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–¥–ª–∏–Ω–∞: {len(base_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
                logger.info(f"   –ü–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤: {base_prompt[:150]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_style
                if persona.reply_style:
                    logger.info(f"‚úÖ Reply style –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω")
                    logger.info(f"   - Emojis: {persona.reply_style.get('emojis')}")
                    logger.info(f"   - Pace: {persona.reply_style.get('pace')}")
                    logger.info(f"   - Signatures: {persona.reply_style.get('signatures')}")
            else:
                logger.error("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("\n" + "=" * 80)
            if all_passed and persona:
                logger.info("üéâ –£–°–ü–ï–•: –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
                logger.info("‚úÖ –ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                logger.info("‚úÖ –ù–æ–≤—ã–π —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
                logger.info("‚úÖ Reply style —Å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏!")
                logger.error("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            logger.info("=" * 80)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
        raise


async def test_flow_with_user():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        await init_db()
        
        logger.info("\n" + "=" * 80)
        logger.info("üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("=" * 80)
        
        async with async_session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(
                text("SELECT id, telegram_id, username FROM users LIMIT 1")
            )
            user_row = result.fetchone()
            
            if not user_row:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
                return
            
            user_id = user_row[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, telegram_id={user_row[1]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            persona_setting = await get_user_persona_setting(session, user_id)
            
            if persona_setting:
                logger.info(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:")
                logger.info(f"   - Persona ID: {persona_setting.persona_id}")
                logger.info(f"   - Is current: {persona_setting.is_current}")
                logger.info(f"   - Overrides: {persona_setting.overrides}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –ø–µ—Ä—Å–æ–Ω–∞–∂
                persona = await get_persona_by_id(session, persona_setting.persona_id)
                if persona:
                    logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω: {persona.name}")
                    logger.info(f"   - –ü—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {persona.prompt_template[:100]}...")
            else:
                logger.info("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–±—É–¥–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)")
            
            logger.info("=" * 80)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_persona_flow()
    await test_flow_with_user()


if __name__ == "__main__":
    asyncio.run(main())
