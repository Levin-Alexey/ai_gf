"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ÆKassa
"""
import logging
import hmac
import hashlib
from datetime import datetime, timedelta, timezone
from typing import Optional

from fastapi import FastAPI, Request, HTTPException, Header
from fastapi.responses import JSONResponse
from pydantic import BaseModel

from database import async_session_maker
from sqlalchemy import update, select
from models import User
from config import (
    BOT_TOKEN,
    YOOKASSA_DISABLE_SIGNATURE_CHECK,
    YOOKASSA_WEBHOOK_SECRET,
)
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="AI GF Payment Webhook")


class YookassaNotification(BaseModel):
    """–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ÆKassa"""
    type: str
    event: str
    object: dict


def verify_webhook_signature(body: bytes, signature: Optional[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç –ÆKassa

    YooKassa –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤,
    –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.
    –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º YOOKASSA_WEBHOOK_SECRET.
    
    Args:
        body: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö
        signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    
    Returns:
        True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
    """
    secret = YOOKASSA_WEBHOOK_SECRET or ""
    if not signature or not secret:
        logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤–µ–±—Ö—É–∫–∞")
        return False

    expected_signature = hmac.new(
        secret.encode('utf-8'),
        body,
        hashlib.sha256
    ).hexdigest()

    return hmac.compare_digest(signature, expected_signature)


async def activate_subscription(telegram_id: int, days: int) -> Optional[datetime]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    
    Returns:
        –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ None
    """
    try:
        async with async_session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            now_utc = datetime.now(timezone.utc)
            base = user.subscription_expires_at if (
                user.subscription_expires_at and user.subscription_expires_at > now_utc
            ) else now_utc
            expires_at = base + timedelta(days=days)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            stmt = (
                update(User)
                .where(User.telegram_id == telegram_id)
                .values(subscription_expires_at=expires_at)
            )
            await session.execute(stmt)
            await session.commit()
            
            logger.info(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è {telegram_id} "
                f"–Ω–∞ {days} –¥–Ω–µ–π –¥–æ {expires_at}"
            )
            return expires_at
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return None


async def send_telegram_message(chat_id: int, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram —á–µ—Ä–µ–∑ Bot API."""
    if not BOT_TOKEN:
        logger.warning("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    timeout = aiohttp.ClientTimeout(total=10)
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, json=payload) as resp:
                if resp.status != 200:
                    body = await resp.text()
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {resp.status} {body}"
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@app.get("/")
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "ok",
        "service": "AI GF Payment Webhook",
        "version": "1.0.0"
    }


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {"status": "healthy", "timestamp": datetime.now(timezone.utc)}


@app.post("/webhook/yookassa")
async def yookassa_webhook(
    request: Request,
    x_yookassa_signature: Optional[str] = Header(None)
):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
    
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://yookassa.ru/developers/using-api/webhooks
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        signature = (
            x_yookassa_signature
            or request.headers.get("X-Yookassa-Signature")
            or request.headers.get("X-Webhook-Signature")
            or request.headers.get("Content-Signature")
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–í–ê–ñ–ù–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!)
        if not verify_webhook_signature(body, signature):
            msg = "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook!"
            if not YOOKASSA_DISABLE_SIGNATURE_CHECK:
                logger.warning(msg)
                return JSONResponse(status_code=400, content={"error": "Invalid signature"})
            else:
                logger.warning(
                    msg + " –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Ñ–ª–∞–≥—É YOOKASSA_DISABLE_SIGNATURE_CHECK=true"
                )
        
        # –ü–∞—Ä—Å–∏–º JSON
        data = await request.json()
        notification = YookassaNotification(**data)
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification.event}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
        if notification.event == "payment.succeeded":
            payment = notification.object
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = payment.get("metadata", {})
            telegram_id = metadata.get("telegram_id")
            plan_days = metadata.get("days")
            
            if not telegram_id or not plan_days:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç telegram_id –∏–ª–∏ days –≤ metadata")
                return JSONResponse(
                    status_code=400,
                    content={"error": "Missing metadata"}
                )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            expires_at = await activate_subscription(
                int(telegram_id),
                int(plan_days)
            )
            
            if expires_at:
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {telegram_id}")
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
                try:
                    until_str = expires_at.astimezone(timezone.utc).strftime('%d.%m.%Y')
                    text = (
                        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ <b>{until_str}</b>.\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíô"
                    )
                    await send_telegram_message(int(telegram_id), text)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram: {e}")
                return {"status": "success"}
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É {telegram_id}")
                return JSONResponse(
                    status_code=500,
                    content={"error": "Subscription activation failed"}
                )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞
        elif notification.event == "payment.canceled":
            payment = notification.object
            payment_id = payment.get("id")
            logger.info(f"‚ùå –ü–ª–∞—Ç—ë–∂ {payment_id} –æ—Ç–º–µ–Ω—ë–Ω")
            return {"status": "canceled"}
        
        # –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è (–ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º)
        else:
            logger.info(f"‚ÑπÔ∏è –°–æ–±—ã—Ç–∏–µ {notification.event} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/webhook/test")
async def test_webhook(request: Request):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
    """
    try:
        data = await request.json()
        
        telegram_id = data.get("telegram_id")
        days = data.get("days", 30)
        
        if not telegram_id:
            raise HTTPException(status_code=400, detail="Missing telegram_id")
        
        success = await activate_subscription(int(telegram_id), int(days))
        
        if success:
            return {"status": "success", "message": "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}
        else:
            raise HTTPException(
                status_code=500,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
    uvicorn.run(
        app,
        host="0.0.0.0",  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
        port=8000,
        log_level="info"
    )
