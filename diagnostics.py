"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –º–Ω–æ–≥–æ—Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""
import asyncio
import logging
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

async def test_postgresql_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        from database import async_session_maker
        
        async with async_session_maker() as session:
            result = await session.execute("SELECT 1 as test")
            test_value = result.scalar()
            
        if test_value == 1:
            logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            logger.error("‚ùå PostgreSQL –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        logger.error(f"üîç DATABASE_URL: {os.getenv('DATABASE_URL', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        return False

async def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
        from redis_client import redis_client
        
        await redis_client.connect()
        await redis_client.redis.ping()
        await redis_client.disconnect()
        
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        logger.error(f"üîç REDIS_HOST: {os.getenv('REDIS_HOST', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        logger.error(f"üîç REDIS_PORT: {os.getenv('REDIS_PORT', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        return False

def test_rabbitmq_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ...")
        from queue_client import queue_client
        
        queue_client.connect()
        queue_client.disconnect()
        
        logger.info("‚úÖ RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
        logger.error(f"üîç RABBITMQ_HOST: {os.getenv('RABBITMQ_HOST', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        logger.error(f"üîç RABBITMQ_PORT: {os.getenv('RABBITMQ_PORT', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        return False

async def test_vector_db():
    """–¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        from vector_client import vector_client
        
        await vector_client.initialize()
        stats = await vector_client.get_collection_stats()
        
        logger.info("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"üîç VECTOR_DB_PATH: {os.getenv('VECTOR_DB_PATH', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        return False

async def test_llm_api():
    """–¢–µ—Å—Ç LLM API"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM API...")
        import aiohttp
        
        api_url = os.getenv('LLM_API_URL')
        api_key = os.getenv('LLM_API_KEY')
        
        if not api_url or not api_key:
            logger.error("‚ùå LLM API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": os.getenv('LLM_MODEL', 'openai/gpt-3.5-turbo'),
            "messages": [{"role": "user", "content": "–¢–µ—Å—Ç"}],
            "max_tokens": 10
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=data, headers=headers) as response:
                if response.status == 200:
                    logger.info("‚úÖ LLM API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    return True
                else:
                    logger.error(f"‚ùå LLM API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM API: {e}")
        return False

async def test_bot_token():
    """–¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...")
        from aiogram import Bot
        
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        bot = Bot(token=bot_token)
        bot_info = await bot.get_me()
        await bot.session.close()
        
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç: @{bot_info.username}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã...")
    logger.info("=" * 50)
    
    tests = [
        ("PostgreSQL", test_postgresql_connection()),
        ("Redis", test_redis_connection()),
        ("RabbitMQ", test_rabbitmq_connection()),
        ("Vector DB", test_vector_db()),
        ("LLM API", test_llm_api()),
        ("Bot Token", test_bot_token()),
    ]
    
    results = []
    
    for test_name, test_coro in tests:
        logger.info(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        logger.info("-" * 30)
        
        try:
            if asyncio.iscoroutine(test_coro):
                result = await test_coro
            else:
                result = test_coro
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 50)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    logger.info("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name:15} | {status}")
        if result:
            passed += 1
    
    logger.info("-" * 50)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.info("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(run_all_tests())
