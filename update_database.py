"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""
import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def update_database():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
            return
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è asyncpg
        if database_url.startswith('postgresql+asyncpg://'):
            database_url = database_url.replace('postgresql+asyncpg://', 'postgresql://')
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = await asyncpg.connect(database_url)
        
        # –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞
        print("üìñ –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç...")
        with open('update_db_memory.sql', 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        print("‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await conn.execute(sql_script)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('user_memories', 'user_emotions', 'user_relationships')
            ORDER BY table_name
        """)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in tables:
            print(f"   - {table['table_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum —Ç–∏–ø—ã
        enums = await conn.fetch("""
            SELECT typname 
            FROM pg_type 
            WHERE typname IN ('memory_type', 'memory_importance')
            ORDER BY typname
        """)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ enum —Ç–∏–ø—ã:")
        for enum_type in enums:
            print(f"   - {enum_type['typname']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        indexes = await conn.fetch("""
            SELECT indexname 
            FROM pg_indexes 
            WHERE tablename IN ('user_memories', 'user_emotions', 'user_relationships')
            ORDER BY tablename, indexname
        """)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:")
        for index in indexes:
            print(f"   - {index['indexname']}")
        
        await conn.close()
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –∏ –≤–æ—Ä–∫–µ—Ä!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env")
        print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")

if __name__ == "__main__":
    asyncio.run(update_database())
