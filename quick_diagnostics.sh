#!/bin/bash

# üîç –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI Girlfriend Bot
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bash quick_diagnostics.sh

echo "üîç –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI Girlfriend Bot..."
echo "=============================================="

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª..."
if [ -f ".env" ]; then
    log_info "‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if grep -q "BOT_TOKEN=" .env; then
        log_info "‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω"
    else
        log_error "‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    fi
    
    if grep -q "DATABASE_URL=" .env; then
        log_info "‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω"
    else
        log_error "‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    fi
    
    if grep -q "REDIS_HOST=" .env; then
        log_info "‚úÖ REDIS_HOST –Ω–∞–π–¥–µ–Ω"
    else
        log_error "‚ùå REDIS_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    fi
    
    if grep -q "RABBITMQ_HOST=" .env; then
        log_info "‚úÖ RABBITMQ_HOST –Ω–∞–π–¥–µ–Ω"
    else
        log_error "‚ùå RABBITMQ_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    fi
    
    if grep -q "LLM_API_KEY=" .env; then
        log_info "‚úÖ LLM_API_KEY –Ω–∞–π–¥–µ–Ω"
    else
        log_error "‚ùå LLM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    fi
else
    log_error "‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
if python -c "import aiogram" 2>/dev/null; then
    log_info "‚úÖ aiogram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_error "‚ùå aiogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if python -c "import redis" 2>/dev/null; then
    log_info "‚úÖ redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_error "‚ùå redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if python -c "import pika" 2>/dev/null; then
    log_info "‚úÖ pika —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_error "‚ùå pika –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if python -c "import chromadb" 2>/dev/null; then
    log_info "‚úÖ chromadb —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_error "‚ùå chromadb –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if python -c "import sentence_transformers" 2>/dev/null; then
    log_info "‚úÖ sentence_transformers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_error "‚ùå sentence_transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞..."
required_files=(
    "main.py"
    "run_worker.py"
    "memory_client.py"
    "vector_client.py"
    "redis_client.py"
    "queue_client.py"
    "bot_integration.py"
    "models.py"
    "config.py"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        log_info "‚úÖ $file –Ω–∞–π–¥–µ–Ω"
    else
        log_error "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º systemd —Å–µ—Ä–≤–∏—Å—ã..."
if systemctl is-active --quiet ai-gf-bot 2>/dev/null; then
    log_info "‚úÖ ai-gf-bot —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
else
    log_warn "‚ö†Ô∏è  ai-gf-bot —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
fi

if systemctl is-active --quiet ai-gf-worker 2>/dev/null; then
    log_info "‚úÖ ai-gf-worker —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
else
    log_warn "‚ö†Ô∏è  ai-gf-worker —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏..."
if systemctl is-active --quiet ai-gf-bot 2>/dev/null; then
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –±–æ—Ç–∞:"
    journalctl -u ai-gf-bot --no-pager -n 5
fi

if systemctl is-active --quiet ai-gf-worker 2>/dev/null; then
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞:"
    journalctl -u ai-gf-worker --no-pager -n 5
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."

# –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –∏–∑ .env
if [ -f ".env" ]; then
    redis_host=$(grep "REDIS_HOST=" .env | cut -d'=' -f2)
    rabbitmq_host=$(grep "RABBITMQ_HOST=" .env | cut -d'=' -f2)
    db_host=$(grep "DATABASE_URL=" .env | cut -d'=' -f2 | sed 's/.*@\([^:]*\):.*/\1/')
    
    if [ -n "$redis_host" ] && [ "$redis_host" != "localhost" ]; then
        if ping -c 1 "$redis_host" >/dev/null 2>&1; then
            log_info "‚úÖ Redis —Å–µ—Ä–≤–µ—Ä $redis_host –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_error "‚ùå Redis —Å–µ—Ä–≤–µ—Ä $redis_host –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    fi
    
    if [ -n "$rabbitmq_host" ] && [ "$rabbitmq_host" != "localhost" ]; then
        if ping -c 1 "$rabbitmq_host" >/dev/null 2>&1; then
            log_info "‚úÖ RabbitMQ —Å–µ—Ä–≤–µ—Ä $rabbitmq_host –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_error "‚ùå RabbitMQ —Å–µ—Ä–≤–µ—Ä $rabbitmq_host –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    fi
    
    if [ -n "$db_host" ] && [ "$db_host" != "localhost" ]; then
        if ping -c 1 "$db_host" >/dev/null 2>&1; then
            log_info "‚úÖ PostgreSQL —Å–µ—Ä–≤–µ—Ä $db_host –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_error "‚ùå PostgreSQL —Å–µ—Ä–≤–µ—Ä $db_host –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    fi
fi

echo ""
log_info "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
log_info "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
echo "python diagnostics.py"
